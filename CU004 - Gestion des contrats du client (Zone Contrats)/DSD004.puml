@startuml
title DSD4.1: Consulter contrats client\n

actor Agent as A
participant Interface as IHM
participant "Services\nMétier\nApplicatifs" as Systeme
participant Contrat

== Rechercher Souscription ==

A -> IHM: Compter les\nsouscriptions par domaine (d'un client)
    IHM -> Systeme : listerContratsClient(**idClient**)
    activate Systeme
        Systeme -> Contrat : obtenirSouscriptionsParIdClient(**idClient**)
        activate Contrat
        Contrat --> Systeme : //Liste<Souscription>//
    	deactivate Contrat

        group Pour chaque //Souscription// de //Liste<Souscription>//
            Systeme -> Contrat: obtenirDomaineParSouscription(**souscription**)
            activate Contrat
            Systeme <<-- Contrat: //Domaine//
    		deactivate Contrat
        end
    IHM <<-- Systeme: //Liste<Domaine, Integer>//
    deactivate Systeme

A -> IHM: Rechercher derniere\nsouscription
    IHM -> Systeme: rechercherDerniereSouscription(**idClient**)
    activate Systeme
        Systeme -> Contrat: obtenirDerniereSouscriptionParIdClient(**idClient**)
        activate Contrat
        Systeme <<-- Contrat: //Souscription//
    	deactivate Contrat

        Systeme -> Contrat: obtenirDomaineParSouscription(**souscription**)
        activate Contrat
        Contrat --> Systeme: //Domaine//
    	deactivate Contrat
    IHM <<-- Systeme: //Souscription, Domaine//
    deactivate Systeme

A -> IHM: Rechercher toutes les\nsouscriptions
    IHM -> Systeme: listerSouscriptions(**idClient**)
    activate Systeme
        Systeme -> Contrat: obtenirSouscriptionsParIdClient(**idClient**)
        activate Contrat
        Systeme <<-- Contrat: //Liste<Souscription>//
    	deactivate Contrat

    	group Pour chaque //Souscription// de //Liste<Souscription>//
            Systeme -> Contrat: obtenirDomaineParSouscription(**souscription**)
            activate Contrat
            Systeme <<-- Contrat: //Domaine//
    		deactivate Contrat

            Systeme -> Contrat: obtenirContratParSouscription(**souscription**)
            activate Contrat
            Systeme <<-- Contrat: //Contrat//
    		deactivate Contrat
        end
    IHM <<-- Systeme: //Liste<Souscription, Domaine, Contrat>//
    deactivate Systeme

A -> IHM: Rechercher toutes les\nsouscriptions d'un domaine
    IHM -> Systeme: listerSouscriptionsParDomaine(**idClient**, **Domaine**)
    activate Systeme
        Systeme -> Contrat: obtenirSouscriptionsParIdClientEtDomaine(**idClient**,**Domaine**)
        activate Contrat
        Systeme <<-- Contrat: Liste<//Souscription//>
    	deactivate Contrat

    	group Pour chaque //Souscription// de //Liste<Souscription>//
            Systeme -> Contrat: obtenirContratParSouscription(**souscription**)
            activate Contrat
            Systeme <<-- Contrat: //Contrat//
    		deactivate Contrat
        end
    Systeme --> IHM : //Liste<Souscription, Contrat>//
    deactivate Systeme

== Créer une souscription ==

A -> IHM: Lister les contrats possibles
    IHM -> Systeme: listerContrats()
    activate Systeme
        Systeme -> Contrat: listerContrats()
        activate Contrat
        Systeme <<-- Contrat: //Liste<Contrat>//
        deactivate Contrat
    IHM <<-- Systeme: //Liste<Contrat>//
    deactivate Systeme

A -> IHM: Lister les contrats possibles d'un domaine
    IHM -> Systeme: listerContratsDomaine(**Domaine**)
    activate Systeme
        Systeme -> Contrat: obtenirContratsDomaine(**Domaine**)
        activate Contrat
        Systeme <<-- Contrat: //Liste<Contrat>//
        deactivate Contrat
    IHM <<-- Systeme : //Liste<Contrat>//
    deactivate Systeme

A -> IHM: Souscrire à un \ncontrat
    IHM -> Systeme: creerSouscription(**idContrat**,**idClient**)
    activate Systeme
        Systeme -> Contrat: creerSouscription(**idContrat**, **idclient**)
        activate Contrat
        Systeme <<-- Contrat: //Souscription//
        deactivate Contrat
    IHM <<-- Systeme: //Souscription//
    deactivate Systeme

== Consulter souscription ==

A -> IHM: Consulter souscription
    IHM -> Systeme: consulterSouscription(**codeSouscription**)
    activate Systeme
    	Systeme -> Contrat: obtenirSouscriptionParCode(**codeSouscription**)
    	activate Contrat
        Systeme <<-- Contrat: //Souscription//
    	deactivate Contrat

    	Systeme -> Contrat: obtenirDomaineParSouscription(**souscription**)
    	activate Contrat
        Systeme <<-- Contrat: //Domaine//
    	deactivate Contrat

    	Systeme -> Contrat: obtenirContratParSouscription(**souscription**)
    	activate Contrat
        Systeme <<-- Contrat: //Contrat//
    	deactivate Contrat

    	Systeme -> Contrat: obtenirOptionsParSouscription(**souscription**)
    	activate Contrat
        Systeme <<-- Contrat: //Liste<Option>//
    	deactivate Contrat
    IHM <<-- Systeme: //Contrat, Liste<Option>, Souscription, Domaine//
    deactivate Systeme

alt
	A -> IHM : Detailler option
        IHM -> Systeme: detaillerOption(**idOption**)
        activate Systeme
            Systeme -> Contrat: ObtenirDetailsOption(**idOption**)
            activate Contrat
            Systeme <<-- Contrat: //DetailsOption//
            deactivate Contrat
        IHM <<-- Systeme: //Option, InfosOption//
        deactivate Systeme
end

alt
    A -> IHM: Souscrire option
        IHM -> Systeme: ajouterOptionSouscription(**codeSouscription**, **idOption** )
        activate Systeme
            Systeme -> Contrat: ajouterOptionSouscription(**codeSouscription**, **idOption**)
            activate Contrat
            Systeme <<-- Contrat: //Souscription//
        deactivate Contrat
        IHM <<-- Systeme: //Souscription//
        deactivate Systeme
end

alt
    A -> IHM : Resilier option
        IHM -> Systeme : supprimerOptionSouscription(**codeSouscription**, **idOption** )
        activate Systeme
            Systeme -> Contrat : supprimerOptionSouscription(**codeSouscription**, **idOption**)
            activate Contrat
            Systeme <<-- Contrat: //Souscription//
        deactivate Contrat
        IHM <<-- Systeme: //Souscription//
        deactivate Systeme
end

alt
    A -> IHM : Resilier contrat
        IHM -> Systeme : resilierSouscription(**codeSouscription**)
        activate Systeme
            Systeme -> Contrat : resilierSouscription(**codeSouscription**)
            activate Contrat
            Systeme <<-- Contrat: //Confirmation//
        deactivate Contrat
        IHM <<-- Systeme: //Confirmation//
        deactivate Systeme
end

alt
    A -> IHM: Choisir periodicite
        IHM -> Systeme: obtenirCoutTotal(**codeSouscription**)
        activate Systeme
            Systeme -> Contrat: obtenirTarifSouscription(**codeSouscription**)
            activate Contrat
            Systeme <<-- Contrat: //tarifBase//
            deactivate Contrat

            Systeme -> Contrat: obtenirOptionsParSouscription(**souscription**)
            activate Contrat
            Systeme <<-- Contrat: //Liste<Option>//
            deactivate Contrat

            group Pour chaque //Option// de //Liste<Option>//
                Systeme -> Contrat : obtenirTarifOption(**Option**)
                activate Contrat
                Systeme <<-- Contrat: //tarifOption//
                deactivate Contrat
            end

        IHM <<-- Systeme: //coutTotal//
        deactivate Systeme

        IHM -> IHM : calculerMensualites(**coutTotal**, **periodicite**)

    A -> IHM: Valider periodicite
        IHM -> Systeme: choisirPeriodicite(**periodicite**, **codeSouscription**)
        activate Systeme
            Systeme -> Contrat: MettreAJourPeriodiciteSouscription(**codeSouscription**, **periodicite**)
            activate Contrat
            Systeme <<-- Contrat: //Souscription//
            deactivate Contrat
        IHM <<-- Systeme: //Souscription//
        deactivate Systeme
end

@enduml
