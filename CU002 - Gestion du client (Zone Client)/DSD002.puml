@startuml
actor Agent
participant Interface as ihm
participant "Services\nMétier\nApplicatifs" as sma
participant Client
participant Personne
participant Structure

== Recupération liste personne ==

Agent -> ihm: selectionZoneClient
    ihm -> sma: obtenirListePersonnes(**idClient**)
    activate sma
        sma -> Client: obtenirListePersonnesParIdClient(**idClient**)
        activate Client
        Client -->> sma: //Liste<idPersonne>//
        deactivate Client

        group Pour chaque //idPersonne// de //Liste<idPersonne>//
            sma -> Personne: obtenirPersonneParId(**idPersonne**)
            activate Personne
            Personne -->> sma: //Personne, Adresse//
            deactivate Personne
        end
    ihm <<-- sma: //Liste<Personne, Adresse>//
    deactivate sma

== Selection par défaut d'une personne ==

ihm -> sma : obtenirPersonne(**idClient, idPersonne**)
activate sma
    sma -> Personne: obtenirPersonneParId(**idPersonne**)
    activate Personne
    sma <<-- Personne: //Personne, Adresse//
    deactivate Personne

    sma -> Client: obtenirAgentDerniereModification(**idClient, idPersone**)
    activate Client
    sma <<-- Client: //idAgent, date//
    deactivate Client

    sma -> Structure: obtenirAgentParId(**idAgent**)
    activate Structure
    sma <<-- Structure: //Agent//
    deactivate Structure
ihm <<-- sma: //Personne, Adresse//
deactivate sma

====

alt 1. Sélectionner une autre personne
    ihm -> sma: obtenirPersonne(**idClient, idPersonne**)
    activate sma
        sma -> Personne: obtenirPersonne(**idPersonne**)
        activate Personne
        sma <<-- Personne: //Personne, Adresse//
        deactivate Personne

        'sma -> Client: obtenirAgentDerniereModification(**idClient, idPersone**)
        'activate Client
        'sma <<-- Client: //idAgent, date//
        'deactivate Client
        '
        'sma -> Structure: obtenirAgentParId(**idAgent**)
        'activate Structure
        'sma <<-- Structure: //Agent//
        'deactivate Structure

    ihm <<-- sma: //Personne, Adresse//
    deactivate sma
end

alt 2. Mettre à jour / retirer une personne
    Agent -> ihm : mettreAJourPersonne
        ihm -> sma : mettreAJourPersonne(**Personne, Adresse**)
        activate sma
            sma -> Personne : mettreAJourPersonne(**Personne, Adresse**)
            activate Personne
            sma <<-- Personne
            deactivate Personne

            sma -> Client : MettreAJourAgentDerniereModification(**idClient, idPersonne, idAgent, Date**)
            activate Client
            sma <<-- Client
            deactivate Client
        ihm <<-- sma
        deactivate sma
else
    Agent -> ihm : retirerPersonne
        ihm -> sma : retirerPersonne(**idPersonne**)
        activate sma
            sma -> Personne : retirerPersonne(**idPersonne**)
            activate Personne
            sma <<-- Personne
            deactivate Personne
        ihm <<-- sma
        deactivate sma
end

== Ajouter une personne ==

Agent -> ihm: ajouterPersonne

Agent -> ihm: rechercherPersonneParNom
    ihm -> sma: rechercherPersonneParNom(**nom**)
    activate sma
        sma -> Personne: rechercherPersonneParNom(**nom**)
        activate Personne
        sma <<-- Personne: //Liste<Personne, Adresse>//
        deactivate Personne
    ihm <<-- sma: //Liste<Personne, Adresse>//
    deactivate sma

alt 3. Ajouter personne trouvée / Créer nouvelle personne
    Agent -> ihm : sélectionnerPersonne
    Agent -> ihm : ajouterPersonne
        ihm -> sma : ajouterPersonne(**idClient, idPersonne**)
        activate sma
            sma -> Client : ajouterPersonne(**idClient, idPersonne, idAgent, Date**)
            activate Client
            sma <<-- Client
            deactivate Client
        ihm <<-- sma
        deactivate sma
else
    Agent -> ihm : créerPersonne
        ihm -> sma : créerAjouterPersonne(**Adresse, Personne, idClient**)
        activate sma
            sma -> Personne: créerPersonneAdresse(**Personne, Adresse**)
            activate Personne
            Personne -->> sma: //idPersonne//
            deactivate Personne

            sma -> Client: ajouterPersonne(**idClient, idPersonne, idAgent, Date**)
            activate Client
            sma <<-- Client
            deactivate Client
        ihm <<-- sma
        deactivate sma
end

@enduml
